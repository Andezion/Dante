Napisz program do pobierania oraz wyświetlania liczb zespolonych, posiadający również możliwość porównywania ich pod względem wartości modułów.

W tym celu przygotuj strukturę complex_t do przechowywania liczb zespolonych. Struktura powinna wyglądać następująco:

struct complex_t {
    float re;
    float im;
};
Przygotuj funkcje do wypełniania oraz do wyświetlania pól struktury complex_t. Prototypy funkcji powinny wyglądać następująco:

struct complex_t* set(struct complex_t* cp, float re, float im, int *err_code);
Funkcja zapisuje wartości przekazane w parametrach re i im do odpowiednich pól struktury cp.

Parametry:

cp - wskaźnik na strukturę typu complex_t, do której mają zostać zapisane przekazane wartości,
re, im - wartości części rzeczywistej i urojonej, które mają zostać zapisane do struktury cp,
err_code - wskaźnik na zmienną, do której ma zostać zapisany, o ile to możliwe, kod błędu:
0 - w przypadku powodzenia,
1 - w przypadku podania błędnych danych.
Wartość zwracana:

Funkcja powinna zwrócić wskaźnik cp do wypełnionej struktury
lub NULL w przypadku niepowodzenia.
void show(const struct complex_t* cp);
Funkcja wyświetlająca na ekranie zawartość struktury cp w postaci:

RE ± iIM
Wymbol RE to wartość części rzeczywistej, a IM urojonej liczby zespolonej, danej wskaźnikiem cp. W przypadku podania wartości NULL funkcja nie podejmuje żadnych akcji.

float complex_abs(struct complex_t* cp, int * err_code);
Funkcja obliczająca moduł liczby zespolonej cp.

Parametry:

cp - wskaźnik na strukturę typu complex_t, której moduł ma zostać obliczony,
err_code - wskaźnik na zmienną, do której ma zostać zapisany, o ile to możliwe, kod błędu:
0 - w przypadku powodzenia,
1 - w przypadku podania błędnych danych.
Wartość zwracana:

-1 - w przypadku kiedy nie można obliczyć modułu,
>=0 - wartość obliczonego modułu liczby cp.
Napisz program, który pobierze od użytkownika dwie liczby zespolone w formacie RE ± iIM a następnie następnie wyświetli je w osobnych liniach na konsoli, w identycznej kolejności (w dwóch oddzielnych liniach). W trzeciej linii program ma wyświetlić informację o tym, która z pobranych liczb ma większy moduł (EQUAL, FIRST lub SECOND).

W przypadku podania przez użytkownika błędnych danych program powinien wyświetlić komunikat Incorrect input i bezzwłocznie zakończyć działanie z kodem błędu 1.

Przykładowa interakcja z programem -- sukces:

Enter a complex number: 37.279256-i45.106023⏎
Enter a complex number: 29.774499+i36.880026⏎
37.28 - i45.11⏎
29.77 + i36.88⏎
FIRST
Enter a complex number: 95.347271+i85.499566⏎
Enter a complex number: -85.499566-i95.347271⏎
95.35 + i85.50⏎
-85.50 - i95.35⏎
EQUAL
Przykładowa interakcja z programem -- błąd danych wejściowych:

Enter a complex number: 92.892317*i98.197510⏎
Incorrect input
Enter a complex number: 17.331682+i53.047870⏎
Enter a complex number: 17.331682/i53.047870⏎
Incorrect input
Enter a complex number: 65+j76⏎
Incorrect input
