Napisz program do sortowania odcinków, zapisanych w pliku binarnym, na podstawie ich współrzędnych.

W tym celu przygotuj funkcje do: wczytywania odcinków z pliku binarnego, do zapisywania odcinków w pliku binarnego oraz od sortowania odcinków. Struktura do przechowywania informacji o odcinku powinna być taka sama jak w zadaniu 2.6 Odcinek.

Prototypy funkcji powinny wyglądać następująco:

int load_segments_b(const char *filename, struct segment_t* p, unsigned int N);
int save_segments_b(const char *filename, const struct segment_t* s, unsigned int N);
Parametry:

file_name - nazwa pliku, z którego funkcja load_segments_b ma wczytać odcinki oraz do którego funkcja save_segments_b ma je zapisać.
p - wskaźnik na tablicę z odcinkami (do zapisu, const) lub do ich wczytania.
N - liczba elementów w tablicy p lub jej pojemność.
Wartość zwracana przez funkcję save_segments_b:

1 - jeżeli do funkcji zostały przekazane błędne dane,
2 - jeżeli nie uda się utworzyć pliku,
3 - jeżeli nie uda się zapisać wszystkich danych do pliku,
0 - w przypadku myślnego zapisu odcinków.
Wartość zwracana przez funkcję load_segments_b:

-1 w przypadku błędnych danych wejściowych,
-2 kiedy plik nie istnieje,
-3 w przypadku kiedy dane w pliku są uszkodzone lub
> 0 - liczba poprawnie wczytanych odcinków w przypadku sukcesu.
int sort(struct segment_t *s, int N);
Funkcja sort sortuje tablicę s struktur segment_t o N elementach.

Wartość zwracana:

1 - w przypadku podania błędnych danych,
0 - w przypadku pomyślnego zakończenia sortowania.
Funkcja sortuje odcinki, zgodnie z następującym kryterium (i w podanej kolejności):

rosnąco względem wartości współrzędnej x pierwszego punktu
rosnąco względme wartości współrzędnej y pierwszego punktu
malejąco względem wartości współrzędnej x drugiego punktu
malejąco względme wartości współrzędnej y drugiego punktu
Napisz program, który pobierze od użytkownika nazwę pliku (nie więcej niż 30 znaków), a następnie wczyta do tablicy struktur jego zawartość. W tym celu przygotuj tablicę na maksymalnie 100 elementów.

Gdy podany przez użytkownika plik nie istnieje to program ma wyświetlić komunikat Couldn't open file i zakończyć działanie z kodem błędu 4. Jeżeli dane w pliku będą uszkodzone, program powinien wyświetlić komunikat File corrupted i zakończyć działanie z kodem błędu 6.

Następnie program powinien posortować odcinki i zapisać je do tego pliku o tej samej nazwie.

Gdy nie uda się zapisać danych do pliku to program powinien wyświetlić komunikat Couldn't create file i zakończyć działanie z kodem błędu 5. W przypadku powodzenia program powinien wyświetlić komunikat File saved.

Struktura pliku binarnego wygląda następująco:

najpierw zapisana jest liczba odcinków w pliku, jako unsigned int,
a następnie poszczególne odcinki.
Przykładowa interakcja z programem -- sukces (wejście:2412in.bin, wyjście: 2412in.bin):

Enter file name:
2412in.bin
File saved
Przykładowa interakcja z programem -- błąd wejścia/wyjścia lub błąd danych:

Enter file name:⏎
they.bin⏎
Couldn't create file⏎
Enter file name:⏎
and.bin⏎
Couldn't open file
Enter file name:⏎
well.bin⏎
File corrupted
Uwagi
W programie, poza deklaracją tablicy, nie wolno używać operatora [].
