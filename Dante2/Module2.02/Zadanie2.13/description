Celem zadania jest napisane programu, który na podstawie bazy kolorów, wczytanych z dysku, oraz koloru podanego przez użytkownika (w formie trzech składowych R, G oraz B) oraz sklasyfikuje go i wyświetli wynik.

W tym celu przygotuj strukturę color_t do przechowywania informacji o próbce koloru i zapisz ją w pliku nagłówkowym color.h. Struktura powinna posiadać trzy pola, po jednym dla każdej składowej koloru w przestrzeni kolorów RGB oraz jedno do przechowania informacji o kolorze, do którego daną próbkę zaliczamy (etykietę próbki).

Wartości składowych barwy mają być przechowywane w zmiennych o typach zmiennoprzecinkowych pojedynczej precyzji. Ich nazwy powinny odpowiadać nazwom składowych koloru, czyli r, g oraz b.

Etykieta powinna być przetrzymywana w zmiennej typu wyliczeniowego colors o nazwie c.

Typ wyliczeniowy colors dany jest następującą deklaracją:

enum colors {
    RED = 1,
    GREEN,
    BLUE,
    YELLOW,
    UNKNOWN
};
Przygotuj funkcje do:

wczytywania listy próbek z dysku,
do obliczania odległości pomiędzy dwiema próbkami oraz
do odnajdywania próbki leżącej najbliżej próbki referencyjnej, w przestrzeni RGB.
Funkcje powinny mieć następujące prototypy:

int load_colors_t(const char *filename, struct color_t* p, int N);
Parametry:

filename - nazwa pliku, z którego ma zostać odczytana baza kolorów,
p - tablica struktur, do której mają zostać zapisane dane,
N - zadeklarowany rozmiar tablicy (jej pojemność).
Wartość zwracana:

-1 - w przypadku podania błędnych danych,
-2 - jeżeli plik nie istnieje,
-3 - jeżeli dane w pliku są niepoprawne lub nie ma wnim danych kolorów
> 0 - liczba odczytanych kolorów (jeżeli odczyt danych się powiódł).
float distance(const struct color_t* p1, const struct color_t* p2, int *err_code);
Funkcja oblicza odległość euklidesową pomiędzy dwoma kolorami, w trójwymiarowej przestrzeni barw RGB.

Parametry:

p1, p2 - dwa kolory, dla których funkcja distance ma wyznaczyć odległość,
err_code - wskaźnik na kod błędu. Funkcja ustawia kod błędu (o ile to możliwe) według następujących wartości:
0 - odległość pomyślnie obliczona
1 - w przypadku dowolnego błędu.
Wartość zwracana:

-1 - w przypadku błędu,
>=0 - w przypadku sukcesu, odległość w przestrzeni RGB.
enum colors find_nearest_neighbour(const struct color_t* database, int size,
            const struct color_t* unknown, int *err_code);

Funkcja dokonuje klasyfikacji koloru unknown na podstawie kryterium minimalno-odległościowego danego koloru unknown względem kolorów w tabeli database. Klasyfikacji polegan na znalezeniu takiej próbki w database która będzie znajdowała się najbliżej wartości uknown w przestrzeni RGB. Funkcja find_nearest_neighbour zwraca etykietę takiej próbki (pole c). Jeśli jest to możliwe, funkcja określa status operacji klasyfikacji za pomocą kodu błędu danego wskaźnikiem err_code.

W przypadku kiedy taka sama odległość będzie dzieliła próbkę unknown od dwóch próbek z tablicy database (ale należących do różnych kolorów - posiadających różne etykiety), funkcja powinna zwrócić wartość UNKNOWN i ustawić kod błędu 2.

Kody błedów err_code:

0 - sukces, funkcja zwraca etykietę koloru dla unknown na podstawie bazy danych database.
1 - w przypadku błędnych danych wejściowych funkcja.
2 - brak możliwości jednoznacznj klasyfikacji (zwracana etykieta to UNKNOWN).
Program powinien w pierwszej kolejności poprosić użytkownika o nazwę pliku z bazą danych próbek do klasyfikacji (nazwa nie powinna być dłuższa niż 30 znaków).

Następnie program powinien pobierać poszczególne próbki unknown, aż do momentu wpisania przez użytkownika błędnych danych. Po odczytaniu każdej próbki program ma wyświetlić kolor, do którego daną próbkę zaliczył (RED, GREEN, BLUE, YELLOW), bądź komunikat UNKNOWN, jeżeli okazało się to niemożliwe.

W przypadku podania błędnej nazwy pliku program wyświetlić komunikat Couldn't open file i zwrócić wartość 4. W przypadku kiedy zawartość pliku jest błędna należy wyświetlić komunikat File corrupted i zwrócić wartość 6.

W przypadku podania błędnych danych przez użytkownika program powinien wyświetlić komunikat Incorrect input i zakończyć działanie z kodem błędu 0.

Przykład interakcji z programem -- sukces (baza: 2413test.txt):

Podaj sciezke:⏎
2413test.txt⏎
Podaj skladowe koloru: 0.93 0.22 0.43⏎
RED⏎
Podaj skladowe koloru: 0.88 0.90 0.18⏎
YELLOW⏎ 
Podaj skladowe koloru: fsdfsd8f79sdf342⏎
Incorrect input
Przykład interakcji z programem -- błędy wejścia/wyjścia oraz danych wejściowych:

Enter file name:⏎
fast.bin⏎
Couldn't open file
Enter file name:⏎
broadposetogethermustthere.txt⏎
Enter color values (R G B): 0.640195 0.284753 THE END⏎
Incorrect input
Uwagi
W programie, poza deklaracją tablicy, nie wolno używać operatora [], za wyjątkie deklaracji tablicy struktur color_t na 100 elementów oraz tablicy na nazwę pliku na 31 elementów (deklaracja tablicy musi wyglądać następująco: nazwa_zmiennej [31]).
W programie nie wolno używać funkcji alokujących pamięć.
