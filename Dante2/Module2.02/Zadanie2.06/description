Napisz program do pobierania, wyświetlania, zapisywania, odczytywania oraz liczenia długości odcinka. Program ten napisz, rozszerzając zadania 2.1 W punkt.

Do reprezentowania odcinka przygotuj strukturę segment_t, posiadającą punkty początku oraz końca odcinka. Struktura powinna wyglądać następująco:

struct segment_t {
    struct point_t start;
    struct point_t end;
};
Przygotuj funkcje do wyświetlania pól struktury odcinka, do wczytywania danych do struktury odcinka oraz do obliczania długości odcinka. Ich prototypy powinny wyglądać następująco:

struct segment_t* read_segment(struct segment_t* p);
Funkcja pobiera od użytkownika współrzędne początkowe i końcowe odcinka, przy każdej współrzędnej funkcja powinna poprosić o podanie danych. Wczytane dane zapisywane są do struktury danej wskaźnikiem p.

Wartośc zwracana:

p jeśli operacja pobrania danych powiodła się lub
NULL jeśli wystąpił dowolny błąd.
void show_segment(const struct segment_t* p);
Funkcja wyświetla na ekranie zawartość struktury segment_t danej wskaźnikiem p. Wynik wyświetlany jest w dwóch liniach:

w pierwszej współrzędne x i y punktu początkowego odcinka
w drugiej współrzędne x i y punktu końcowego odcinka.
W przypadku błędu danych wejściowych funkcja nie podejmuje żadnych akcji.

float length(const struct segment_t* s, int *err_code);
Funkcja oblicza długość odcinka danego wskaźnikiem s.

Parametry:

s - wskaźniki na strukturę typu segment_t,
err_code - wskaźnik na zmienną, do której ma zostać zapisany kod błędu (jesli jest taka możliwość),
0 - jeżeli długość została obliczona,
1 w przeciwnym przypadku.
Wartość zwracana:

obliczoną długość odcinka s jeśli jest to możliwe lub
-1 jeżeli niemożliwe było jej obliczenie.
Napisz program, który pobierze od użytkownika współrzędne początku i końca odcinka, a następnie pobrane dane do struktury. W przypadku podania błędnych danych program powinien wyświeltlić komunikat Incorrect input i bezzwłocznie zakończyć działanie z kodem błędu 1.

W przeciwnym przypadku program ma wyświetlić w konsoli współrzędne początku oraz końca odcinka (w dwóch oddzielnych wierszach)oraz jego długość (z dokładnością dwóch miejsc po przecinku, w trzecim wierszu).

Przykład interakcji z programem -- sukces:

Enter coordinates of the first point:⏎
Enter X coordinate: -2⏎
Enter Y coordinate: -9⏎
Enter coordinates of the second point:⏎
Enter X coordinate: -8⏎
Enter Y coordinate: 1⏎
Line start coords: x = -2; y = -9⏎
Line end coords: x = -8; y = 1⏎
11.66
Przykładowa interakcja z programem -- błędy danych wejściowych:

Enter coordinates of the first point:⏎
Enter X coordinate: vIrw⏎
Incorrect input
Enter coordinates of the first point:⏎
Enter X coordinate: 4⏎
Enter Y coordinate: VzUmy⏎
Incorrect input
Enter coordinates of the first point:⏎
Enter X coordinate: -3⏎
Enter Y coordinate: 3⏎
Enter coordinates of the second point:⏎
Enter X coordinate: mSzNfHkWpD⏎
Incorrect input
