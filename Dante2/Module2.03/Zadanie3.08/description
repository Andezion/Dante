Napisz program do klasyfikacji próbek kolorów na podstawie danych z pliku.

w tym celu przygotuj strukturę color_t do przechowywania informacji o próbce koloru i zapisz ją w pliku nagłówkowym color.h. Wartość koloru będzie zapisana na 4 bajtach:

na najmłodszym bajcie będzie zapisana wartość czerwonej składowej koloru,
następnie zielonej,
niebieskiej
a na najstarzym bajcie zapisany będzie poziom przeźroczystości.
Struktura powinna umożliwiać dostęp:

do pełnej wartości koloru poprzez pole value,
do poszczególnych składowych koloru - pola r, g, b oraz a,
informacji o informacji o kolorze, do którego daną próbkę zaliczamy (etykietę próbki). Etykieta powinna być przetrzymywana w zmiennej typu wyliczeniowego colors o nazwie color.
Typ wyliczeniowy colors dany jest następującą deklaracją:

enum colors
{
  RED = 1,
  GREEN,
  BLUE,
  YELLOW,
  UNKNOWN
};
Przygotuj funkcje do: wczytywania listy próbek z dysku, do obliczania odległości pomiędzy dwiema próbkami oraz do odnajdywania próbki leżącej najbliżej próbki referencyjnej, w przestrzeni RGB.

Funkcje te powinny mieć następujące prototypy:

int load_colors_t(const char *filename, struct color_t* p, int N);
Funkcja wczytuje próbki z pliku tekstowego filename do tablicy p o pojemności N elementów.

Parametry:

filename - nazwa pliku, z którego ma zostać odczytana baza kolorów,
p - tablica struktur, do której mają zostać zapisane dane z pliku,
N - zadeklarowany rozmiar tablicy.
Wartość zwracana:

-1 - przypadku podania błędnych danych podczas wywołania
-2 - jeżeli plik filename nie istnieje,
-3 - jeżeli dane w pliku są niepoprawne,
> 0 - liczba odczytanych rekordów jeżeli odczyt danych się powiódł.
Format pliku:

Kolejne kolory (próbki) powinny być zapisane w pliku tekstowym w kolejnych wierszach. Każdy wiersz ma zawierać dwie liczby: wartość koloru, podana zgodnie z opisem pola value w typie colors_t oraz etykieta dla typu wyliczeniowego colors. Przykład:

15082790 3
2549221 4
2500325 1
2549286 2
15083046 3
2483750 2
Przykład koloru niebieskiego (R=0,G=0,B=255): 16711680.

float distance(const struct color_t* p1, const struct color_t* p2, int *err_code);
Funkcja oblicza odległość euklidesową pomiędzy dwoma kolorami p1 oraz p2, w przestrzeni barw RGB.

Wartość zwracana:

>=0 - odległośc w przestrzeni RGB między p1 oraz p2. Kod błędu err_code jest ustawiany na 0 (o ile to możliwe).
-1 - błąd wyznaczani odległości. Wartości kodu err_code:
1 - podano niewłaściwe wartości parametrów podczas wywołania funkcji.
enum colors find_nearest_neighbour(const struct color_t* database, int size,
            const struct color_t* unknown, int *err_code);
Funkcja powinna obliczyć odległość koloru zapisanego w próbce unknown do każdej próbki z tablicy database i zwrócić etykietę koloru tej próbki, do której unknown ma najbliżej.

W przypadku kiedy taka sama odległość będzie dzieliła próbkę unknown od dwóch próbek z listy database (ale należących do różnych kolorów - posiadających różne etykiety), funkcja powinna zwrócić wartość UNKNOWN i ustawić kod błędu, o ile to możliwe, na 2.

Kody błędów err_code:

0 - jeżeli udało się poprawnie określić etykietę próbki unknown
1 - błąd w danych przekazanych podczas wywołania funkcji,
2 - brak możliwości jednoznacznego określenia etykiety; funkcja zwraca UNKNOWN.
Napisz program, który wczyta do tablicy listę kolorów z pliku tekstowego, podanego przez użytkownika (nazwa nie przekroczy 30 znaków).

W przypadku podania błędnej nazwy pliku program wyświetlić komunikat Couldn't open file i zwrócić wartość 4. W przypadku kiedy zawartość pliku jest błędna należy wyświetlić komunikat File corrupted i zwrócić wartość 6.

Po wczytaniu bazy danych z pliku tekstowego program rozpoczyna pętlę, w której wczytuje kolor od użytkownika i próbuje podać jego etykiete na podstawie wczytanej bazy wiedzy.

Każdy kolor należy pobrać w formie czterech liczb - wartości poszczególnych kanałów (czerwony, zielony, niebieski, przeźroczystość). Dla wprowadzonego koloru należy wyświetlić jedną z pięciu etykiet colors (RED, GREEN, BLUE, YELLOW), bądź komunikat UNKNOWN, jeżeli nie da się jednoznacznie określić etykiety.

W przypadku podania błędnych danych przez użytkownika program powinien wyświetlić komunikat Incorrect input i zakończyć działanie z kodem błędu 0.

Przykład interakcji z programem -- sukces

Enter file name: ⏎
let.bin⏎
Enter a color as four values (R, G, B, A): 227 36 35 211⏎
RED⏎
Enter a color as four values (R, G, B, A): 38 37 229 19⏎
BLUE⏎
Enter a color as four values (R, G, B, A): 41 232 39 122⏎
GREEN⏎
Enter a color as four values (R, G, B, A): 227 232 35 175⏎
YELLOW⏎
Enter a color as four values (R, G, B, A): 227 38 38 38⏎
RED⏎
Enter a color as four values (R, G, B, A): THE END⏎
Incorrect input
Plik: let.bin.

Przykład interakcji z programem -- sukces

Enter file name: ⏎
solvecarebandspacestandfun⏎
Enter a color as four values (R, G, B, A): 169 70 THE END⏎
Incorrect input
Przykład interakcji z programem -- brak pliku, plik uszkodzony

Enter file name: ⏎
letter.txt⏎
Couldn't open file
Enter file name: ⏎
your⏎
File corrupted
Uwagi
W programie, poza deklaracją tablicy, nie wolno używać operatora []. Wyjątkime jest deklaracja tablicy struktur color_t na 100 elementów oraz tablicy na nazwę pliku na 31 elementów (deklaracja tablicy musi wyglądać następująco: nazwa_zmiennej [31]).
Używanie operatorów bitowych jest niedozwolone.
